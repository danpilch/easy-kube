# Default environment variables
KUBE_MULTI_MASTER = ENV['KUBE_MULTI_MASTER'] || false
KUBE_MASTER_COUNT = Integer(ENV['KUBE_MASTER_COUNT'] || 1)
KUBE_NODE_COUNT = Integer(ENV['KUBE_NODE_COUNT'] || 3)

KUBE_MEMORY = ENV['KUBE_MEMORY'] || "3072"
KUBE_CPUS = Integer(ENV['KUBE_CPUS'] || 2)

Vagrant.configure("2") do |config|
  config.ssh.insert_key = false
  config.ssh.username = 'vagrant'

  # Create arrays of master and node machine names
  master_machines = (0...KUBE_MASTER_COUNT).to_a.map{|x| "easy-kube-master-#{x}"}
  node_machines = (0...KUBE_NODE_COUNT).to_a.map{|x| "easy-kube-node-#{x}"}
  # create array for haproxy if multi-master mode enabled
  haproxy_machines = ["easy-kube-haproxy-0"]

  # Concat arrays for iteration
  if KUBE_MULTI_MASTER
    machines = master_machines + node_machines + haproxy_machines
    ansible_groups = {
      "kubernetes_haproxy" => haproxy_machines,
      "kubernetes_master" => master_machines,
      "kubernetes_nodes" => node_machines,
      "kubernetes_servers:children" => ["kubernetes_master", "kubernetes_nodes"]
    }
  else
    machines = master_machines + node_machines
    ansible_groups = {
      "kubernetes_master" => master_machines,
      "kubernetes_nodes" => node_machines,
      "kubernetes_servers:children" => ["kubernetes_master", "kubernetes_nodes"]
    }
  end

  count = machines.size

  config.vm.provider "virtualbox" do |vb,override|
    vb.customize ["modifyvm", :id, "--memory", KUBE_MEMORY, "--cpus", KUBE_CPUS]
    # We want to get rid of the first default route so that ansible
    # Recognizes the second eth1 interface as ansible_default_ipv4
    # Which in this case it attached to our actual LAN network
    override.vm.network "public_network", bridge: "wlp2s0",
      use_dhcp_assigned_default_route: true
    override.vm.provision "shell",
      run: "always",
      inline: "ip r | awk '$1 == \"default\" && $5 == \"eth0\" { print $1,$2,$3 }' |  xargs --no-run-if-empty sudo ip r del"
  end

  machines.each do |machine_id|
    config.vm.define "#{machine_id}" do |machine|
      machine.vm.hostname = "#{machine_id}"
      machine.vm.box = "centos/8"
      count -= 1
      if count == 0
        machine.vm.provision "ansible" do |ansible|
          # Disable default limit to connect to all the machines
          ansible.limit = "all"
          ansible.become = true
          ansible.playbook = "../create-cluster-playbook.yml"
          if KUBE_MULTI_MASTER
            ansible.extra_vars = {
              control_plane_multi_master: true
            }
          end

          #ansible.tags=""
          #ansible.verbose = true

          ansible.groups = ansible_groups
        end
      end
    end
  end


end
