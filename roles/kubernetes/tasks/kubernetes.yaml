---
- name: Add IP address of all hosts to all hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '.*{{ item }}$'
    line: "{{ item }} {{ hostvars[item].ansible_nodename }}"
    state: present
  when: hostvars[item].ansible_nodename is defined
  with_items: "{{ groups['all'] }}"
  tags: add_hosts

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  tags: swap

- name: Disable swap permanently, persist reboots
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes
  tags: swap

- name: install utils
  yum:
    name:
      - iproute-tc
      - bind-utils
    state: installed
  tags: install_utils

- name: Install Kubernetes Repository
  copy:
    src: kubernetes.repo
    dest: /etc/yum.repos.d/kubernetes.repo
    mode: 0644
  tags: add_kubernetes_repo

- name: Install Kubernetes packages
  yum:
    name:
      - kubelet
      - kubeadm
      - kubectl
    disable_excludes: kubernetes
    state: latest
  tags: install_kubernetes_packages

# Defining cgroup-driver
- name: Define sysconfig kubelet
  template:
    src: "sysconfig_kubelet.j2"
    dest: "/etc/sysconfig/kubelet"
    owner: root
    group: root
  tags: define_sysconfig_kubelet

- name: Enable kubelet systemctl
  service:
    name: kubelet
    state: stopped
    enabled: yes
  tags: start_kubelet

- name: Generate kubeadm config file
  template:
    src: "kubeadm_config.yaml.j2"
    dest: "/tmp/kubeadm_config.yaml"
  tags: generate_kubeadm_config

- name: Start master node
  shell: "kubeadm init --config /tmp/kubeadm_config.yaml"
  register: kubeadm_init
  when: inventory_hostname in groups['kubernetes_master']
  tags: init_kubernetes_master

- name: Generate join command from master
  shell: "kubeadm token create --print-join-command"
  register: kubeadm_join
  when: inventory_hostname in groups['kubernetes_master']
  tags: init_kubernetes_master

- name: Ensure node /etc/kubernetes is empty
  shell: "rm -rf /etc/kubernetes/*"
  when: inventory_hostname in groups['kubernetes_nodes']
  tags: purge_kubernetes_config_dir_nodes

- name: Register nodes with master
  shell: "{{ hostvars[groups['kubernetes_master'][0]].kubeadm_join.stdout_lines[-1] }}"
  when: inventory_hostname in groups['kubernetes_nodes']
  tags: register_nodes

- name: Get k8s version
  shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf version | base64 -w 0"
  register: k8s_version
  when: inventory_hostname in groups['kubernetes_master']
  tags: get_k8s_version

- name: Install overlay network
  shell: "kubectl --kubeconfig /etc/kubernetes/admin.conf apply -f 'https://cloud.weave.works/k8s/net?k8s-version={{ hostvars[groups['kubernetes_master'][0]].k8s_version.stdout }}'"
  when: inventory_hostname in groups['kubernetes_master']
  tags: install_weave_overlay_network

- name: Create kubeconfig directory in vagrant user directory
  file:
    path: "/home/vagrant/.kube/"
    state: directory 
    mode: 0755
    owner: vagrant
    group: vagrant
  when: inventory_hostname in groups['kubernetes_master']
  tags: copy_kubeconfig

- name: Copy kubectl admin config file to vagrant user directory
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/home/vagrant/.kube/config"
    remote_src: true
    owner: vagrant
    group: vagrant
  when: inventory_hostname in groups['kubernetes_master']
  tags: copy_kubeconfig

- name: Add kubectl autocompletion to bashrc for vagrant user
  lineinfile:
    dest: "/home/vagrant/.bashrc"
    line: "source <(kubectl completion bash)"
    state: present
  when: inventory_hostname in groups['kubernetes_master']
  tags: add_kubectl_completion
